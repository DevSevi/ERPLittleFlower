// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LittleFlowerERP.Migrations
{
    [DbContext(typeof(LittleFlowerContext))]
    [Migration("20250820170009_fixFKRechnungsposition")]
    partial class fixFKRechnungsposition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LittleFlowerERP.Models.Artikel", b =>
                {
                    b.Property<int>("ArtikelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtikelID"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Einheit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Einkaufspreis")
                        .HasColumnType("real");

                    b.Property<int>("LagerbestandID")
                        .HasColumnType("int");

                    b.Property<float>("Verkaufspreis")
                        .HasColumnType("real");

                    b.HasKey("ArtikelID");

                    b.ToTable("Artikel");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Bestellposition", b =>
                {
                    b.Property<int>("BestellpositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BestellpositionID"));

                    b.Property<int>("ArtikelID")
                        .HasColumnType("int");

                    b.Property<int>("BestellungID")
                        .HasColumnType("int");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<float>("Preis")
                        .HasColumnType("real");

                    b.HasKey("BestellpositionID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("BestellungID");

                    b.ToTable("Bestellposition");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Bestellung", b =>
                {
                    b.Property<int>("BestellungID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BestellungID"));

                    b.Property<DateTime>("Bestelldatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("LieferantID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BestellungID");

                    b.HasIndex("LieferantID");

                    b.ToTable("Bestellung");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Kunde", b =>
                {
                    b.Property<int>("KundeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KundeID"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KundeID");

                    b.ToTable("Kunden");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Lagerbestand", b =>
                {
                    b.Property<int>("LagerbestandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LagerbestandID"));

                    b.Property<int>("ArtikelID")
                        .HasColumnType("int");

                    b.Property<int>("LagerortID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LetzteInventur")
                        .HasColumnType("datetime2");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.HasKey("LagerbestandID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("LagerortID");

                    b.ToTable("Lagerbestand");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Lagerort", b =>
                {
                    b.Property<int>("LagerortID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LagerortID"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Standort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LagerortID");

                    b.ToTable("Lagerort");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Lieferant", b =>
                {
                    b.Property<int>("LieferantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LieferantID"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LieferantID");

                    b.ToTable("Lieferanten");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Rechnung", b =>
                {
                    b.Property<int>("RechnungID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RechnungID"));

                    b.Property<bool>("Bezahlt")
                        .HasColumnType("bit");

                    b.Property<decimal>("Gesamtpreis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KundeID")
                        .HasColumnType("int");

                    b.Property<int>("Mahnstufe")
                        .HasColumnType("int");

                    b.Property<DateTime>("Rechnungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("RechnungID");

                    b.HasIndex("KundeID");

                    b.ToTable("Rechnung");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Rechnungsposition", b =>
                {
                    b.Property<int>("RechnungspositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RechnungspositionID"));

                    b.Property<int>("ArtikelID")
                        .HasColumnType("int");

                    b.Property<float>("Einzelpreis")
                        .HasColumnType("real");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<int>("RechnungID")
                        .HasColumnType("int");

                    b.HasKey("RechnungspositionID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("RechnungID");

                    b.ToTable("Rechnungsposition");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Bestellposition", b =>
                {
                    b.HasOne("LittleFlowerERP.Models.Artikel", "Artikel")
                        .WithMany("Bestellpositionen")
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LittleFlowerERP.Models.Bestellung", "Bestellung")
                        .WithMany("Bestellpositionen")
                        .HasForeignKey("BestellungID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Bestellung");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Bestellung", b =>
                {
                    b.HasOne("LittleFlowerERP.Models.Lieferant", "Lieferant")
                        .WithMany()
                        .HasForeignKey("LieferantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lieferant");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Lagerbestand", b =>
                {
                    b.HasOne("LittleFlowerERP.Models.Artikel", "Artikel")
                        .WithMany("Lagerbestände")
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LittleFlowerERP.Models.Lagerort", "Lagerort")
                        .WithMany("Lagerbestände")
                        .HasForeignKey("LagerortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Lagerort");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Rechnung", b =>
                {
                    b.HasOne("LittleFlowerERP.Models.Kunde", "Kunde")
                        .WithMany("Rechnungen")
                        .HasForeignKey("KundeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Rechnungsposition", b =>
                {
                    b.HasOne("LittleFlowerERP.Models.Artikel", "Artikel")
                        .WithMany("Rechnungspositionen")
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LittleFlowerERP.Models.Rechnung", "Rechnung")
                        .WithMany("Rechnungspositionen")
                        .HasForeignKey("RechnungID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Rechnung");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Artikel", b =>
                {
                    b.Navigation("Bestellpositionen");

                    b.Navigation("Lagerbestände");

                    b.Navigation("Rechnungspositionen");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Bestellung", b =>
                {
                    b.Navigation("Bestellpositionen");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Kunde", b =>
                {
                    b.Navigation("Rechnungen");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Lagerort", b =>
                {
                    b.Navigation("Lagerbestände");
                });

            modelBuilder.Entity("LittleFlowerERP.Models.Rechnung", b =>
                {
                    b.Navigation("Rechnungspositionen");
                });
#pragma warning restore 612, 618
        }
    }
}
